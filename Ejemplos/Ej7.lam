def Sucesor = \x:Nat. suc x

-- S toma un natural x, una lista y y una lista z. Retorna una nueva lista con el sucesor de x con la lista z
def S = \x:Nat. (\y:List. (\z:List. cons (Sucesor x) z))

-- S toma un natural x, una lista y y una lista z. Retorna una nueva lista con el sucesor de x y los sucesores de cada elemento de z
def SS = \x:Nat. (\y:List. (\z:List. cons (Sucesor x) (RL nil S z)))

-- SUMPOS toma una lista y me devuelve una nueva lista con los elementos sumados con su posicion mas uno
-- Esta funci√≥n es MUY ineficiente
def SUMPOS =  \l:List. RL nil SS l


def UNO = Sucesor 0
def DOS = Sucesor UNO
def TRES = Sucesor DOS

def LISTA = cons UNO (cons DOS (cons TRES nil))
